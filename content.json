{"meta":{"title":"Ryan's Blog","subtitle":"MyShareLib","description":"","author":"Ryan","url":"https://www.dongdong.live","root":"/"},"pages":[{"title":"categories","date":"2020-04-01T14:28:06.000Z","updated":"2020-04-01T14:28:48.600Z","comments":true,"path":"categories/index.html","permalink":"https://www.dongdong.live/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-04-01T17:18:05.000Z","updated":"2020-04-03T10:38:11.331Z","comments":true,"path":"contact/index.html","permalink":"https://www.dongdong.live/contact/index.html","excerpt":"","text":""},{"title":"about","date":"2020-04-01T14:29:43.000Z","updated":"2020-04-01T14:30:13.883Z","comments":true,"path":"about/index.html","permalink":"https://www.dongdong.live/about/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-04-01T17:26:35.000Z","updated":"2020-04-03T10:40:21.827Z","comments":true,"path":"friends/index.html","permalink":"https://www.dongdong.live/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-01T14:29:01.000Z","updated":"2020-04-01T14:29:32.420Z","comments":true,"path":"tags/index.html","permalink":"https://www.dongdong.live/tags/index.html","excerpt":"","text":""},{"title":"link","date":"2020-04-01T17:17:17.000Z","updated":"2020-04-01T17:17:17.972Z","comments":true,"path":"link/index.html","permalink":"https://www.dongdong.live/link/index.html","excerpt":"","text":""}],"posts":[{"title":"VMware安装MAC","slug":"VMware安装MAC","date":"2020-04-03T06:36:15.000Z","updated":"2020-04-03T10:11:04.921Z","comments":true,"path":"2020/04/03/vmware-an-zhuang-mac/","link":"","permalink":"https://www.dongdong.live/2020/04/03/vmware-an-zhuang-mac/","excerpt":"","text":"VMware安装MAC本次向大家介绍的是最新发布的macOS.Catalina.10.15.4 1. 刻录安装U盘首先我们准备一个大于16G的U盘然后使用TransMac工具进行写入我们下载好的镜像文件打开工具，打开我们下载好的镜像文件然后选择启动–&gt;写入硬盘映像写入方式我们要选则RAW然后点击写入 2.VMware打补丁我们打开虚拟机，点击新建虚拟机，然后下一步，进行到选择系统的时候会发现没有我们要的MACOS系统这时候我们就要打上苹果系统的补丁了，把下载的MK-Unlocker-VM15.5文件夹拷贝到wmware所在文件夹，然后打开文件夹，点击win-install.cmd!!!关闭杀毒软件再进行，以防误杀导致不成功再次打开VMware，点击新建虚拟机，下一步到选择操作系统，就会发现多处一项Apple MAC OS X(M)至此我们补丁已经打好可以进行下一步了 3.设置虚拟机U盘启动3.1 点击新建虚拟机选择典型 –》 稍后安装操作系统 –》mac10.15 –》 文件路径自己定 –》 完成 –》 打开虚拟机设置点击添加–》 选择硬盘 –》 下一步选择使用物理磁盘选择使用单个分区，U盘一般都是最后一个下一步选择Apple HFS,这个就是我们需要指定的安装盘然后启动虚拟机已经开始加载了简体中文–》磁盘工具–》我们可以看到第一块就是我们创建的虚拟机的硬盘选中，然后点击抹掉格式选择Mac OS 扩展日志式，点击抹掉然后退回到上一步，选择安装macOS选择我们刚才抹掉的那块磁盘点击安装等安装结束一直下一步即可，然后设置账户和密码然后就进入到主界面，但是我们发现这个窗口很小，这时候我们就该安装vmtoos扩展工具了![1585888986855.png](https://i.loli.net/2020/04/03/i2AvPIyYNCVJruK.pn我们点击VMware自带的安装工具就会报错解决方法：这时候我们需要先把安装U盘给去掉打开虚拟机设置，选择我们的硬盘2，点击移除然后打开虚拟机菜单栏再次选择安装VMtools打开虚拟机设置，CD选择使用ISO文件，选择我们下载的darwin.iso，把它放在VMware的安装目录然后点击确定，然后重启一下点击右下角的那个光盘小图标，点击链接，然后就会自动弹出安装界面了双击安装，然后默认下一步即可安装的过程中我们需要打开系统偏好设置，先点击解锁，再点击允许，等待其安装完成即可，选择重新启动) 教程到此结束，如果有什么问题，欢迎留言，关于物理机安装黑苹果我需要整理一下资料后面会出教程。感谢您阅读本教程！ 文中使用工具链接：Ryan’s blog 提取码： iwbv","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.dongdong.live/categories/Linux/"}],"tags":[{"name":"Linux安装","slug":"Linux安装","permalink":"https://www.dongdong.live/tags/Linux%E5%AE%89%E8%A3%85/"}]},{"title":"VMware 安装 ArchLinux","slug":"VMware-安装-ArchLinux","date":"2020-04-02T08:56:44.000Z","updated":"2020-04-02T10:10:55.241Z","comments":true,"path":"2020/04/02/vmware-an-zhuang-archlinux/","link":"","permalink":"https://www.dongdong.live/2020/04/02/vmware-an-zhuang-archlinux/","excerpt":"","text":"VMware 安装 ArchLinux1.去官网下载ArchLinux下载链接：https://www.archlinux.org/download/ 2.新建虚拟机) 下载的时候注意内核版本 到这一步，先不要打开虚拟机，我们还要改变一下设置 至此，虚拟机就创建完成了 3.配置系统打开虚拟机，默认选择第一项，不要动，稍等片刻就自动进入配置系统页面了到这一步说明我们虚拟机配置无误，开始配置arch系统 3.1 检查网络Arch Linux是不支持离线安装的，需要在线安装，所以我们要先检查一下网络使用DHCP联网 dhcpcdping -c 3 baidu.com能ping通就说明我们网络是通的，可以继续下一步了 3.2 时间同步正确的（误差之内的）时间在验证连接或证书的可信程度时非常重要，例如 HTTPS 和 GnuPG 都需要准确的时间来验证证书的有效性。因此我们需要同步一下时间 timedatectl set-ntp true没报错就说明我们配置成功 3.3 磁盘分区这里只针对 UEFI with GPT 启动方式，并基于最简单的硬盘结构，采用最简单的分区策略。（其中 SWAP 分区可选，我这里 SWAP 的大小就直接是虚拟机内存大小乘以2） 挂载点 分区 分区类型 大小 /mnt/boot dev/sda1 EFI system partition 512M SWAP dev/sda2 Linux swap (交换分区) 8G /mnt /dev/sda3 Linux x86-64 根目录（/） 剩余空间 磁盘分区工具有很多，本文我就采用fdisk分区工具进行分区 步骤如下： 1.查看当前所有分区fdisk -l 2. 分区准备工作fdisk /dev/sda进入分区程序。输入 m 可以查看 fdisk 的帮助。在决定写入之前，所有的更改都不会被保存。如果过程中输入错误，可以按q键选择不保存退出重新分区即可。 我们在创建新磁盘分区之前应该先输入g 新建一个空的GPT分区表 3. EFI分区输入n 建立第一个分区—— EFI 分区，首先会问你选择分区号（默认是可用的最小分区号）， 回车 即可；不用填写 first sector（默认值为可用的最小扇区号），直接 回车 ，在提示输入 last sector 的时候输入 +512M 来依据分区大小自动计算终止扇区。我们发现其文件类型是“Linux filesystems” 这里需要改编成EFI 文件类型，输入t选择文件类型，然后输入L 查看所有的文件类型可以看到1号代表的就是我们需要的EFI 分区，19号是一会儿我们需要的SWAP交换分区，默认的是20号Linux文件系统然后我们输入q再输入1.我们可以看到文件类型已经被换成了EFI文件。至此EFI分区创建完成。 4. Swap交换分区跟EFI分区创建方法一样，512M改为+8G ，然后转换文件类型这样我们swap分区也做好了 5. 文件分区（根目录）输入n创建，然后一直回车就行，默认会选择最大剩余空间，文件类型也是默认的不用改变。 6.核查保存输入p可以预览即将生效的分区大小和类型如果无误，输入w写入保存即可。 然后在程序外部我们再检查一下 fdisk -l /dev/sda跟刚才预览结果一致，就说明关于分区我们距离成功就差一点了。 7. 格式化分区、启用Swap交换分区、挂载分区 格式化分区我们用下面的命令来完成 mkfs.fat -F32 /dev/sda1 mkswap /dev/sda2 mkfs.ext4 /dev/sda3其中： -F32 表明我们建立的是 fat32 而非 fat16 或其它不是我们想要的 fat，UEFI规范要求对FAT12，FAT16和FAT32文件系统的支持，但是任何符合条件的供应商都可以选择添加对其他文件系统的支持。 例如，Apple macOS 中的固件支持 HFS+ 文件系统。 在第二句中，我们为 /dev/sda2 创建了专用于 swap 的存储系统；这是一个特殊的分区类型，它很难被当作 filesystem，所以建立它的指令是 mkswap 而非 mkfs.* 。 启用swap交换分区 swapon /dev/sda2然后使用swapon -show来检查交换分区有没有被启用如果跟我一样那就是启动成功。 挂载分区，我们使用以下3条命令 根目录然后挂载整个新系统的根，这里我们将它挂载到 Arch ISO 环境的 /mnt 下。不要担心，Linux 有一个实用工具 chroot，可以将目录结构的任意点作为新的根。 mount /dev/sda3 /mnt EFI分区首先我们要先创建EFI挂载文件目录 mkdir /mnt/boot然后挂载 mount /dev/sda1 /mnt/boot到此关于分区这一块我们就已经全部完成了。 3.安装3.1 首先配置镜像源用vim编辑镜像源文件 vim /etc/pacman.d/mirrorlist打开后我们输入/China,回车，移动到最前端，然后输入V（一定要大写）按俩下下箭头，选中这俩行，按d剪切，然后输入6G，按p复制然后输入n检索下一个多选几个备用源，第一个是清华大学的。默认里面是没有阿里云的源的，我们可以手动输入进去。按I进入编辑模式。这是我配置的：然后ESC，输入shift和:，最后输入wq保存退出。至此我们镜像源就配置好了。 3.2 安装下面我们就可以安装系统和一些常规的硬件的固件以及软件包了，使用pacstrap脚本。 pacstrap /mnt base linux linux-firmware然后静待安装即可，如果一直报错，那就说明我们镜像源没有配置好，回到上一步重新配置即可。OK，装完，我们还要装一些必备的常用软件，我认为NetworkManager这个必须要装，NetworkManager 是检测网络、自动连接网络的程序。无论是无线还是有线连接，它都可以令您轻松管理。 pacstrap /mnt networkmanager安装完会提示当前实在chroot下运行，忽略请求，这个等下我们在进入root环境下重新设置即可。 3.3 生成 fstab 文件fstab 文件可用于定义磁盘分区，包括各种块设备或者远程文件系统应该如何装入到文件系统。-U 选项指的是 使用UUID作为源标识符。 genfstab -U /mnt &gt;&gt; /mnt/etc/fstab然后我们在打开查看一下如果出错可以使用vim更改 cat /mnt/etc/fstab 4.root下的设置 arch-chroot bash 脚本是软件包 arch-install-scripts 的一部分，在运行 /usr/bin/chroot 前，这个脚本会挂载 /proc api 文件系统，建立可用的 /etc/resolv.conf 。chroot 工具能指定目录结构任意的位置为新的根；由于我们需要进行的配置应该在新系统上完成，所以我们应该 chroot 到新系统的根，也就是 /mnt。不过这里我们不是直接就使用 chroot ，而是通过镜像里提供的 arch-chroot 来完成额外的配置。使用下面的命令完成更改 arch-chroot /mnt如果显示如图所示，那就说明我们切换成功。 4.1 设置时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime使用以下命令将硬件时钟设置为当前系统时间： hwclock --systohc4.2 本地化/etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，去掉对应行前面的注释符号（＃）就可以啦，还是用 vim 来编辑，建议选择 en_US.UTF-8 UTF-8 的项： vim /etc/locale.gen这里你会看到报错vim : command not found 这是因为我们root环境下还没安装vim,使用下面命令进行安装： pacman -S vim然后再次打开/etc/locale.gen，输入/en_US回车然后按n 向下筛选：找到 en_US.UTF-8 UTF-8这行，输入i进入编辑模式去掉前面的#，然后按ESC退出编辑模式，输入shift+: wq保存。如果想要中文：这俩行前的# 也要去掉然后保存。接着执行locale-gen生成locale信息。 locale-gen然后创建locale.conf文件，并相应的设置LANG变量： echo LANG=en_US.UTF-8 &gt; /etc/locale.conf这里如果直接选择中文会出现乱码的情况，系统文件中不包含中文字体 4.3 网络配置1. 创建hostname文件echo ryanArch &gt; /etc/hostname注意：ryanArch，是你想要设置的主机名，名字可以任意取但是尽量不要包含特殊字符，会报错。设置完成之后我们可以cat检查一下，因为后面设置hosts文件的时候我们还要用到。 2. 编辑hosts文件vim /etc/hosts输入i进入到编辑模式，然后输入内容 127.0.0.1 localhost ::1 localhost 127.0.1.1 你的主机名.localdomain 你的主机名 注意：ryanArch，是你刚才所设置的主机名，需要替换。然后输入ESC，shfit+:，wq保存。还记得我们之前装的NetworkManager吗？这里我们把它设置开机启动 systemctl enable NetworkManager 4.4 设置root密码执行 passwd密码输入不可见，输入就行了，输入完点回车再输入一遍，再回车就行了 5. 安装引导程序 !!!这一步可是重中之重，如果设置错误等下重启就会进入不了系统，前面做的那些功夫都是白费，需要重头来一遍。systemd-boot (以前被称为gummiboot) 是可以执行 EFI 镜像文件的简单 UEFI 启动管理器。启动的内容可以通过一个配置(glob)或者屏幕菜单选择。Arch 默认安装的 systemd 提供了这个功能。配置很简单，但是只能启动 EFI 可执行程。 5.1 安装EFI 启动管理器bootctl --path=/boot install–path= 后面接的就是我们一开始创建的 esp (EFI system partition) 的挂载路径 5.2 基本配置大家在设置的时候一定要非常细心，错一个字母，就全错了 基本设置保存在 /boot/loader/loader.conf ,有三个选项： default – 默认加载的配置文件 (不含 .conf 后缀)。 timeout – 启动选单的超时时间,如果不设置的话,启动选单只有在按键时才显示。 editor - 是否允许用户编辑内核参数. yes 是允许, no 是阻止。用 vim 编辑 /boot/loader/loader.conf ： vim /boot/loader/loader.conf大家可以按照我的来编辑，以防出错 然后我们需要添加一个启动项前面我们不是已经在 /boot/loader/loader.conf 中的选项指定了一个 default 选项嘛，所以我们现在就来配置一下这个默认启动选项。我们要编辑的配置文件是 /boot/loader/entries/arch.conf 同样也是用 vim 来编辑： vim /boot/loader/entries/arch.conf大家可以按照我的来编辑，以防出错 title Arch Linux linux /vmlinuz-linux initrl /initramfs-linux.img options root=PARTUUID= 退出编辑后我们需要执行一下这条命令 blkid -s PARTUUID -o value /dev/sda3 &gt;&gt; /boot/loader/entries/arch.conf上面的命令将会把根分区的UUID的值追加到 /boot/loader/entries/arch.conf 的最后一行。则文件 /boot/loader/entries/arch.conf 的内容现在为（注意 ：PARTUUID的值都是因人而异的）：我们打开该文件添加一些： vim /boot/loader/entries/arch.conf !!!注意：我们需要把UUID调到上一行，因为刚才是命令追加的会多出一个换行符，不更改的话开机就会报错。更改之后我们要在后面加上空格rw。至此，恭喜你，关于arch-Linux基本安装已经全部完成了。 6.重启首先输入exit退出到Arch ISO环境下,然后输入命令重启虚拟机。 systemctl reboot开机我们可以看到我们新建的启动项然后回车，当出现这个界面的时候，再次恭喜你，基础安装成功！然后输入我们root账号和你设置的root密码，密码不可见输入完成后回车即可。 3.配置arch-Linux3.1 创建普通用户 正经的 Linux 用户不会用 root 干所有的事情，如果这么做的话将会很危险。创建一个普通的用户，并让它可以通过 sudo 指令用 root 权限执行命令是一般的解决方案。 在使用sudo 之前，我们需要安装sudo这个软件包 pacman -S sudo 然后我们需要配置sudoers执行 visudo 来修改 /etc/sudoers 文件。使用它的好处是，它会在保存时作语法检查，以避免错误的更改使 sudo 彻底不可用。 EDITOR=vim visudo 此处通过环境变量 EDITOR 来声明使用 vim 来编辑文件，默认的情况下 visudo 是用 vi 来编辑的。（vi 和 vim 的用法略有不同） 输入shift+: ,再输入set nu,显示行号我们找到82行把%wheel前面的#去掉然后ESC退出，wq保存 去掉注释的作用：取消注释以允许 wheel 组成员执行任何命令。 添加一个wheel组普通用户 user -m -G wheel 用户名 用户名规范：用户名必须是合法的。最简单的就是 不带空格的字母 和 数字 的组合。参数介绍： -m 参数表示同时创建该用户的家目录，这会被默认置为 /home/用户名。 -G wheel 表示同时将该用户加入 wheel 用户组。 然后设置该用户的密码 passwd 用户名 到这里普通用户就创建完成了。输入exit，退出到用户登录然后输入我们刚创建的普通用户名和密码 变成了 $ ，这就意味着这是普通用户。 3.2 VMware的相关服务因为我们使用的是虚拟机创建的，所以需要配置一下相应的配置，比如VMware Tools 安装VMware Tools sudo pacman -S open-vm-tools因为是普通用户所以安装的时候我们需要输入密码，密码不可见输入完回车即可。 设置vmtoolsd、vmblock-fuse、gtkmm3服务开机启动 vmtoolsd : 负责汇报虚拟机状态的服务 vmware-vmblock-fuse : 文件系统实用程序。 通过FUSE（用户空间中的文件系统）实现宿主 / 虚拟机之间拖拽文件。 gtkmm3 : 如要启用客户机的拖拽与复制粘贴功能，则需要安装 gtkmm3 systemctl enable vmtoolsd vmware-vmblock-fuse设置过程都是需要我们提供密码的gtkmm3需要安装 sudo pacman -S gtkmm3 相关驱动 xf86-input-vmmouse : VMWare鼠标输入驱动程序 xf86-video-vmware : vmware显示驱动程序，如果想要让虚拟机显示器填满屏幕，就必须要安装这个软件包 mesa : OpenGL规范的开源实现 sudo pacman -S xf86-input-vmmouse xf86-video-vmware mesa输入Y确认安装即可 4.配置图形界面大家肯定都不太喜欢这个命令行模式把，黑乎乎的很丑，那么我们接下来就要开始配置图形界面了。 4.1 安装桌面环境显示服务X 窗口管理系统 ( X11 或者 X ) 是基于网络的显示协议，提供了窗口功能，包含建立图形用户界面(GUI)的标准工具和协议。 Xorg 是 X 窗口的开源实现，提供图形用户界面。 安装 xorg ： sudo pacman -S xorg尽管 Xorg 提供了用于构建图形环境的基本框架，但是为了获得完整的用户体验，可能还需要其他组件。 GNOME，KDE，LXDE 和 Xfce 等桌面环境将各种 X 客户端捆绑在一起，例如窗口管理器，面板，文件管理器，终端仿真器，文本编辑器，图标和其他实用程序。这里介绍俩种: 1.Gnome 2.KDE依据喜好来进行安装，我个人喜欢gnome所以演示就用gnome来演示 sudo pacman -S gnome过程可能有点长，大家需要耐心等待。。。。 安装显示管理器：大多数桌面环境都包括一个显示管理器，用于自动启动图形环境和管理用户登录。这里使用gdm sudo pacman -S gdm然后设置开机启动 systemctl enable gdm 关于KDE plasma-meta : 用以安装 KDE Plasma 的元软件包sudo pacman -S plasma-meta sddm : 基于QML的X11和Wayland显示管理器sudo pacman -S sddm sddm 服务设为开机自启：systemctl enable sddm systemctl reboot systemctl reboot重启即可GnomeKDE 4.2 配置终端模拟器我们进入gnome桌面环境发现是不是少了一些东西，我们怎么输入命令呢，这就需要我们安装终端模拟器了 终端模拟器有很多，这里就举几个经典的例子： GNU/Linux：gnome-terminal、Konsole； macOS：Terminal.app、iTerm2； Windows：Win32 控制台、ConEmu 等等这里我要安装的终端模拟器是 Tilix sudo pacman -S tilix不喜欢的可以安装deepin-terminal （属于Deepin的默认终端仿真应用程序，源码仓库地址：https://github.com/linuxdeepin/deepin-terminal我选择这个的原因是因为它开源，而且无需任何配置就已经很美观了，还有一点就是不会有 konsole 在系统显示缩放比例为 小数倍 时随机出现横线或竖线的 bug。）在安装终端模拟器之前，我们需要按下 Ctrl + Alt + F3 切换至 tty3(KDE下是F2，tty2) ，登录，然后输入命令： sudo pacman -S deepin-terminal为了预防出错，建议大家要使用小键盘数字键安装完成后输入 Ctrl + Alt + F1 进入图形化界面 4.3 配置中文环境前面我已经开启了中文配置如果前面只选择了英文需要到/etc/locale.gen中取消掉zh_CN.UTF-8前面的注释然后打开tilix输入 sudo locale-gen vim ~.xprofilevim我们发现没法复制粘贴，那就需要用到文本编辑器了这里推荐一个好用的文本编辑器leafpd sudo pacman -S leafpad sudo leafpad ~.xprofile写入export LANG=zh_CN.UTF-8export LANG=zh_CN:en_USexport LC_CTYPE=en_US.UTF-8然后写入配置文件 sudo leafpad /etc/locale.conf加入：LANG=zh_CN.UTF-8 然后我们需要下载一下中文字体：有很多可以供我们选择： Google Noto Fonts 系列：noto-fonts-sc 和 noto-fonts-emoji sudo pacman -S base-devel git git clone https://aur.archlinux.org/noto-fonts-sc.git cd noto-fonts-sc makepkg -si sudo pacman -S noto-fonts-emoji 文泉 sudo pacman -S wqy-zenhei我们重启一下。。。我们可以看到已经变为中文了推荐大家保留旧的名称以便以后写路径的时候方便 4.4 安装中文输入法(搜狗输入法)sudo pacman -S fcitx-im sudo pacman -S fcitx-sogoupinyin sudo pacman -S fcitx-configtool当我们输入第二条命令的时候会报错这时候我们需要修改一下配置文件 sudo leafpad /etc/pacman.conf在末尾添加 [archlinuxcn]Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 打开32位仓库，去掉前面的注释 [multilib]Include = /etc/pacman.d/mirrorlist保存，然后刷新 sudo pacman -Syy安装密钥包 sudo pacman -S archlinuxcn-keyring然后再运行第二条命令在运行过程中我们发现一个问题现在我的时间是14：17 而arch Linux上显示的是06：17 时间不对称导致了这个问题解决方法： 打开设置，选择日期和时间 打开自动设置日期和时间，时区调整为上海重启后，再运行第二条命令编辑xprofile文件 sudo leafpad ~/.xprofile写入：export XIM=fcitxexport XIM_PROGRAM=fcitxexport GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=@im=fcitx”然后我们还需要再次重启一下之后打开fcitx-configtool选择搜狗输入法即可 结尾：关于VMware安装ArchLinux的方法就介绍到这里了，整篇我都是手打，边演示边写教程，跟着我的步骤一步一步来肯定是能成功的。关于在物理机上安装，后续教程会讲。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.dongdong.live/categories/Linux/"}],"tags":[{"name":"Linux安装","slug":"Linux安装","permalink":"https://www.dongdong.live/tags/Linux%E5%AE%89%E8%A3%85/"}]},{"title":"hexo+GitHub部署个人博客","slug":"hexo-GitHub部署个人博客","date":"2020-04-02T04:41:30.000Z","updated":"2020-04-02T07:19:53.213Z","comments":true,"path":"2020/04/02/hexo-github-bu-shu-ge-ren-bo-ke/","link":"","permalink":"https://www.dongdong.live/2020/04/02/hexo-github-bu-shu-ge-ren-bo-ke/","excerpt":"","text":"Hexo+Github博客搭建[toc] 1. 安装node.js去官网下载64位安装包 -&gt; 传送门一路next安装好之后进入命令提示符输入node -v、npm -v 如果出现版本号那么我们就安装成功了。如果没有出现版本号，可能是没有配置环境变量的原因计算机 —&gt; 属性 —&gt; 环境变量选择Path，然后点击编辑 2.安装Git去官网下载即可 -&gt; 传送门!安装后输入git –version 出现版本号即为安装成功，关于环境变量配置方法跟node.js一样 3.准备一个GitHub账号传送门新建一个项目：然后如下图所示，输入自己的项目名字，README初始化也要勾上。 打开设置：我们可以选一个主题样式点击上方链接我们就进入到了我们的页面中 4.安装Hexo自己找一个空余磁盘，我用的是我电脑里的E盘，新建一个www网站根目录文件夹然后在www文件夹中建立我们的网页存放文件夹进入到该文件夹内，点击右键Git Bash Here输入： npm i hexo-cli -g安装完后输入hexo -v验证是否安装成功。如果安装错误：目前国内npm源有问题；所以键入如下代码即可安装成功: npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install hexo-cli -g需要重新打开才可安装出现下面信息说明我们安装成功然后就要初始化我们的网站，输入hexo init初始化文件夹这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开http://localhost:4000/，就可以看到我们的博客啦，效果如下：按ctrl+c关闭本地服务器。 5. 链接GitHub设置你github的名字和邮箱 git config --global user.name &quot;EzioEcho&quot; git config --global user.email &quot;wpx1007047653@gmail.com&quot; 然后生成密钥SSH key：在你头向下点击settings找到SSH and GPG keys新建一个SSH，名字随便起然后回到GitBash输入 ssh-keygen -t rsa -C &quot;wpx1007047653@gmail.com&quot;我们可以看到公钥保存到这个路径下了然后我们输入 cat ~/.ssh/id_rsa.pub就会出现我们的密钥，然后复制到GitHub中 然后点击add SSH key 然后就可以看到我们创建的密钥了 回到gitbash输入 ssh -T git@github.com如果如下图所示，出现你的用户名，那就成功了。刚创建可能会连不上，多试几次就好了然后下面我们要改一下博客的配置找到博客根目录下的_config.yml文件，这个是博客的配置文件，在这里你可以修改与博客相关的各种信息。拉到最后，修改为： deploy: type: git repository: https://github.com/EzioEcho/ryanBlog.github.io.git branch: master 然后需要安装一下npm i hexo-deployer-git扩展，开始上传三连 hexo clean hexo g hexo d然后就可以去你的页面但是发现好像CSS走丢了解决办法： 没绑定域名 修改hexo中 _config.yml 文件：将url:/ 修改为 url: http://xxx.guithub.io 。即 在后面加上Github 主页的仓库名 然后修改root文件目录为 root: /你的项目名再次打开发现样式已经好了 绑定域名是不会出现这个问题的，但是也要修改一下URL关于绑定域名：首先我们先ping一下 ：ping xxx.github.ioxxx指的是你的GitHub用户名然后再解析域名，添加一条A记录，指向这个ping到的IP这时候你的仓库项目文件夹就会多出一个CNAME文件然后打开项目设置：在Custom domain添加你的域名然后在你hexo文件的根目录中的_config.yml修改URL，root项就选到根目录就行 关于hexo的一些命令hexo new “postName” //新建文章hexo new page “pageName” //新建页面hexo g //生成静态页面至public目录hexo server //开启预览访问端口（默认端口4000，’ctrl + c’关闭server）简写为 hexo shexo deploy //将.deploy目录部署到GitHub 简写 hexo d 备份博客源文件有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。","categories":[{"name":"前端开发","slug":"前端开发","permalink":"https://www.dongdong.live/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"网站建设","slug":"网站建设","permalink":"https://www.dongdong.live/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-04-01T11:27:36.769Z","updated":"2020-04-01T11:27:36.769Z","comments":true,"path":"2020/04/01/hello-world/","link":"","permalink":"https://www.dongdong.live/2020/04/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.dongdong.live/categories/Linux/"},{"name":"前端开发","slug":"前端开发","permalink":"https://www.dongdong.live/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Linux安装","slug":"Linux安装","permalink":"https://www.dongdong.live/tags/Linux%E5%AE%89%E8%A3%85/"},{"name":"网站建设","slug":"网站建设","permalink":"https://www.dongdong.live/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}]}