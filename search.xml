<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VMware安装MAC</title>
      <link href="/2020/04/03/vmware-an-zhuang-mac/"/>
      <url>/2020/04/03/vmware-an-zhuang-mac/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware安装MAC"><a href="#VMware安装MAC" class="headerlink" title="VMware安装MAC"></a>VMware安装MAC</h1><p><strong>本次向大家介绍的是最新发布的macOS.Catalina.10.15.4</strong></p><h2 id="1-刻录安装U盘"><a href="#1-刻录安装U盘" class="headerlink" title="1. 刻录安装U盘"></a>1. 刻录安装U盘</h2><p>首先我们准备一个大于16G的U盘<br>然后使用TransMac工具进行写入我们下载好的镜像文件<br>打开工具，打开我们下载好的镜像文件<br>然后选择启动–&gt;写入硬盘映像<br><img src="https://i.loli.net/2020/04/03/XMDKPdxRyeEnGuo.png" alt=""><br>写入方式我们要选则RAW<br><img src="https://i.loli.net/2020/04/03/WF459hJX3lzD1rL.png" alt=""><br>然后点击写入<br><img src="https://i.loli.net/2020/04/03/iOX13yLaqr6nkeH.png" alt=""><br><img src="https://i.loli.net/2020/04/03/dneuOcphPVwY7yW.png" alt=""></p><h2 id="2-VMware打补丁"><a href="#2-VMware打补丁" class="headerlink" title="2.VMware打补丁"></a>2.VMware打补丁</h2><p>我们打开虚拟机，点击新建虚拟机，然后下一步，进行到选择系统的时候会发现没有我们要的MACOS系统<br><img src="https://i.loli.net/2020/04/03/PYVsJTg7cEBk8O1.png" alt=""><br>这时候我们就要打上苹果系统的补丁了，把下载的MK-Unlocker-VM15.5文件夹拷贝到wmware所在文件夹，然后打开文件夹，点击<strong>win-install.cmd</strong><br><font color=red>!!!关闭杀毒软件再进行，以防误杀导致不成功</font><br><img src="https://i.loli.net/2020/04/03/N5Apvxzh3m7OWEK.png" alt="1585837266699.png"><br>再次打开VMware，点击新建虚拟机，下一步到选择操作系统，就会发现多处一项Apple MAC OS X(M)<br><img src="https://i.loli.net/2020/04/03/bc9g8NdE6kYzptx.png" alt=""><br>至此我们补丁已经打好可以进行下一步了</p><h2 id="3-设置虚拟机U盘启动"><a href="#3-设置虚拟机U盘启动" class="headerlink" title="3.设置虚拟机U盘启动"></a>3.设置虚拟机U盘启动</h2><h4 id="3-1-点击新建虚拟机"><a href="#3-1-点击新建虚拟机" class="headerlink" title="3.1 点击新建虚拟机"></a>3.1 点击新建虚拟机</h4><p>选择典型 –》 稍后安装操作系统 –》mac10.15 –》 文件路径自己定 –》 完成 –》 打开虚拟机设置<br>点击添加–》 选择硬盘 –》 下一步<br><img src="https://i.loli.net/2020/04/03/QdrYyJsT8nZB1U9.png" alt=""><br>选择使用物理磁盘<br><img src="https://i.loli.net/2020/04/03/LKEBzGWQgY9XTFl.png" alt=""><br>选择使用单个分区，U盘一般都是最后一个<br><img src="https://i.loli.net/2020/04/03/16VPX7vnzCudNa3.png" alt=""><br>下一步<br><img src="https://i.loli.net/2020/04/03/RYMaFiQJd8fzsLx.png" alt=""><br>选择Apple HFS,这个就是我们需要指定的安装盘<br>然后启动虚拟机<br><img src="https://i.loli.net/2020/04/03/V8yOBxeFTQ3gJwa.png" alt="1585885734208.png"><br>已经开始加载了<br>简体中文–》磁盘工具–》<br><img src="https://i.loli.net/2020/04/03/rcJfxIB7O8Shgu6.png" alt=""><br>我们可以看到第一块就是我们创建的虚拟机的硬盘<br>选中，然后点击抹掉<br><img src="https://i.loli.net/2020/04/03/QdtXrlWZJSHBxVy.png" alt=""><br>格式选择Mac OS 扩展日志式，点击抹掉<br>然后退回到上一步，选择安装macOS<br><img src="https://i.loli.net/2020/04/03/uUlJ8cjKIGtCw69.png" alt=""><br>选择我们刚才抹掉的那块磁盘点击安装<br>等安装结束一直下一步即可，然后设置账户和密码<br><img src="https://i.loli.net/2020/04/03/ge27N3BoKaUW6QD.png" alt=""><br><img src="https://i.loli.net/2020/04/03/3eZKu8XJUQRb1Iq.png" alt=""><br>然后就进入到主界面，但是我们发现这个窗口很小，这时候我们就该安装vmtoos扩展工具了<br>![1585888986855.png](<a href="https://i.loli.net/2020/04/03/i2AvPIyYNCVJruK.pn" target="_blank" rel="noopener">https://i.loli.net/2020/04/03/i2AvPIyYNCVJruK.pn</a><br>我们点击VMware自带的安装工具就会报错<br><img src="https://i.loli.net/2020/04/03/gp3yqjfMrmvJW7D.png" alt=""><br>解决方法：<br>这时候我们需要先把安装U盘给去掉<br>打开虚拟机设置，选择我们的硬盘2，点击移除<br><img src="https://i.loli.net/2020/04/03/y1IhoOae7lUEHWN.png" alt=""><br>然后打开虚拟机菜单栏<br>再次选择安装VMtools<br>打开虚拟机设置，CD选择使用ISO文件，选择我们下载的darwin.iso，把它放在VMware的安装目录<br>然后点击确定，然后重启一下<br><img src="https://i.loli.net/2020/04/03/hZGmYVT3EsWQvFb.png" alt=""><br>点击右下角的那个光盘小图标，点击链接，然后就会自动弹出安装界面了<br><img src="https://i.loli.net/2020/04/03/yQ9LVBhoulXMHf2.png" alt="1585890432020.png"><br>双击安装，然后默认下一步即可<br>安装的过程中我们需要打开系统偏好设置，先点击解锁，再点击允许，等待其安装完成即可，选择重新启动<br><img src="https://i.loli.net/2020/04/03/sZL9bqchMv3g7oB.png" alt="1585890497762.png"><br><img src="https://i.loli.net/2020/04/03/UqAoPFaKwSrcONf.png" alt="">)<img src="http://q75w0xexj.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%2813%29.png" alt=""></p><p>教程到此结束，如果有什么问题，欢迎留言，关于物理机安装黑苹果我需要整理一下资料后面会出教程。感谢您阅读本教程！</p><p>文中使用工具链接：<a href="https://pan.baidu.com/s/14IU7j3cJb_81ufPuYW7sTQ" target="_blank" rel="noopener">Ryan’s blog</a>  <font color=red>提取码：</font> iwbv</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware 安装 ArchLinux</title>
      <link href="/2020/04/02/vmware-an-zhuang-archlinux/"/>
      <url>/2020/04/02/vmware-an-zhuang-archlinux/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-安装-ArchLinux"><a href="#VMware-安装-ArchLinux" class="headerlink" title="VMware 安装 ArchLinux"></a>VMware 安装 ArchLinux</h1><h2 id="1-去官网下载ArchLinux"><a href="#1-去官网下载ArchLinux" class="headerlink" title="1.去官网下载ArchLinux"></a>1.去官网下载ArchLinux</h2><p>下载链接：<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">https://www.archlinux.org/download/</a></p><h2 id="2-新建虚拟机"><a href="#2-新建虚拟机" class="headerlink" title="2.新建虚拟机"></a>2.新建虚拟机</h2><p><img src="https://i.loli.net/2020/04/02/wUzY4FhOybMJjuA.jpg" alt="1585706241239.jpg">)<img src="https://i.loli.net/2020/04/02/G74SNHtbYeCfOBm.jpg" alt="1585706281555.jpg"></p><blockquote><p>下载的时候注意内核版本<br><img src="https://i.loli.net/2020/04/02/LFum3AMCS8HXWyQ.jpg" alt="1585706356311.jpg"></p></blockquote><p><img src="https://i.loli.net/2020/04/02/CNGnVL8xlM4bK32.jpg" alt="1585706376650.jpg"></p><p><img src="https://i.loli.net/2020/04/02/BAWEiOmwLgYoCsF.jpg" alt=""></p><p>到这一步，先不要打开虚拟机，我们还要改变一下设置<br><img src="https://i.loli.net/2020/04/02/akyEMBQrNYnKAFT.jpg" alt=""></p><p><img src="https://i.loli.net/2020/04/02/fZs4ITAqmJSiCel.jpg" alt=""></p><p>至此，虚拟机就创建完成了</p><h2 id="3-配置系统"><a href="#3-配置系统" class="headerlink" title="3.配置系统"></a>3.配置系统</h2><p>打开虚拟机，默认选择第一项，不要动，稍等片刻就自动进入配置系统页面了<br><img src="https://i.loli.net/2020/04/02/vKADkIFrJtHGxf7.jpg" alt=""><br>到这一步说明我们虚拟机配置无误，开始配置arch系统</p><h3 id="3-1-检查网络"><a href="#3-1-检查网络" class="headerlink" title="3.1 检查网络"></a>3.1 检查网络</h3><p>Arch Linux是不支持离线安装的，需要在线安装，所以我们要先检查一下网络<br>使用DHCP联网</p><pre><code>dhcpcd</code></pre><pre><code>ping -c 3 baidu.com</code></pre><p><img src="https://i.loli.net/2020/04/02/hK8F3aNViAuU6lI.jpg" alt=""><br><img src="https://i.loli.net/2020/04/02/oxDtYTnQyaceWbC.jpg" alt=""><br>能ping通就说明我们网络是通的，可以继续下一步了</p><h3 id="3-2-时间同步"><a href="#3-2-时间同步" class="headerlink" title="3.2 时间同步"></a>3.2 时间同步</h3><p>正确的（误差之内的）时间在验证连接或证书的可信程度时非常重要，例如 HTTPS 和 GnuPG 都需要准确的时间来验证证书的有效性。因此我们需要同步一下时间</p><pre><code>timedatectl set-ntp true</code></pre><p><img src="https://i.loli.net/2020/04/02/MjexURfkqAJrgaY.jpg" alt=""><br>没报错就说明我们配置成功</p><h3 id="3-3-磁盘分区"><a href="#3-3-磁盘分区" class="headerlink" title="3.3 磁盘分区"></a>3.3 磁盘分区</h3><p>这里只针对 UEFI with GPT 启动方式，并基于最简单的硬盘结构，采用最简单的分区策略。（其中 SWAP 分区可选，我这里 SWAP 的大小就直接是虚拟机内存大小乘以2）</p><table><thead><tr><th align="left">挂载点</th><th align="right">分区</th><th align="center">分区类型</th><th>大小</th></tr></thead><tbody><tr><td align="left">/mnt/boot</td><td align="right">dev/sda1</td><td align="center">EFI system partition</td><td>512M</td></tr><tr><td align="left">SWAP</td><td align="right">dev/sda2</td><td align="center">Linux swap (交换分区)</td><td>8G</td></tr><tr><td align="left">/mnt</td><td align="right">/dev/sda3</td><td align="center">Linux x86-64 根目录（/）</td><td>剩余空间</td></tr></tbody></table><blockquote><p>磁盘分区工具有很多，本文我就采用fdisk分区工具进行分区</p></blockquote><p>步骤如下：</p><h4 id="1-查看当前所有分区"><a href="#1-查看当前所有分区" class="headerlink" title="1.查看当前所有分区"></a>1.查看当前所有分区</h4><pre><code>fdisk -l</code></pre><p><img src="https://i.loli.net/2020/04/02/NwRXska3VS72GFm.jpg" alt=""></p><h4 id="2-分区准备工作"><a href="#2-分区准备工作" class="headerlink" title="2. 分区准备工作"></a>2. 分区准备工作</h4><pre><code>fdisk /dev/sda</code></pre><p>进入分区程序。输入 m 可以查看 fdisk 的帮助。在决定写入之前，所有的更改都不会被保存。如果过程中输入错误，可以按q键选择不保存退出重新分区即可。</p><blockquote><p>我们在创建新磁盘分区之前应该先输入g 新建一个空的GPT分区表<br><img src="https://i.loli.net/2020/04/02/xbdVfRg5eK9SNmX.jpg" alt=""></p></blockquote><h4 id="3-EFI分区"><a href="#3-EFI分区" class="headerlink" title="3. EFI分区"></a>3. EFI分区</h4><p>输入<strong>n</strong> 建立第一个分区—— <strong>EFI 分区</strong>，首先会问你选择分区号（默认是可用的最小分区号）， 回车 即可；不用填写 first sector（默认值为可用的最小扇区号），直接 回车 ，在提示输入 last sector 的时候输入 +512M 来依据分区大小自动计算终止扇区。<br><img src="https://i.loli.net/2020/04/02/T8yOrsZvwMaD2NV.jpg" alt=""><br>我们发现其文件类型是“<strong>Linux filesystems</strong>” 这里需要改编成EFI 文件类型，输入t选择文件类型，然后输入L 查看所有的文件类型<br><img src="https://i.loli.net/2020/04/02/nrz3l4D2WwQmZai.jpg" alt=""><br>可以看到<strong>1</strong>号代表的就是我们需要的<strong>EFI 分区</strong>，<strong>19</strong>号是一会儿我们需要的<strong>SWAP交换分区</strong>，默认的是<strong>20号</strong>Linux文件系统<br>然后我们输入q再输入1.<br><img src="https://i.loli.net/2020/04/02/75qwCUEprRbNYIX.jpg" alt=""><br>我们可以看到文件类型已经被换成了EFI文件。<br>至此EFI分区创建完成。</p><h4 id="4-Swap交换分区"><a href="#4-Swap交换分区" class="headerlink" title="4. Swap交换分区"></a>4. Swap交换分区</h4><p>跟EFI分区创建方法一样，512M改为+8G ，然后转换文件类型<br><img src="https://i.loli.net/2020/04/02/lodOuBQDSKYjtgb.jpg" alt=""><br>这样我们swap分区也做好了</p><h4 id="5-文件分区（根目录）"><a href="#5-文件分区（根目录）" class="headerlink" title="5. 文件分区（根目录）"></a>5. 文件分区（根目录）</h4><p>输入n创建，然后一直回车就行，默认会选择最大剩余空间，文件类型也是默认的不用改变。<br><img src="https://i.loli.net/2020/04/02/XDijPH15OxISv4h.jpg" alt=""></p><h4 id="6-核查保存"><a href="#6-核查保存" class="headerlink" title="6.核查保存"></a>6.核查保存</h4><p>输入<strong>p</strong>可以预览即将生效的分区大小和类型<br><img src="https://i.loli.net/2020/04/02/18scSkiZgRwrJuf.jpg" alt=""><br>如果无误，输入<strong>w</strong>写入保存即可。</p><blockquote><p>然后在程序外部我们再检查一下</p></blockquote><pre><code>fdisk -l /dev/sda</code></pre><p>跟刚才预览结果一致，就说明关于分区我们距离成功就差一点了。<br><img src="https://i.loli.net/2020/04/02/nNYLbIDAC7EtOJH.jpg" alt=""></p><h4 id="7-格式化分区、启用Swap交换分区、挂载分区"><a href="#7-格式化分区、启用Swap交换分区、挂载分区" class="headerlink" title="7. 格式化分区、启用Swap交换分区、挂载分区"></a>7. 格式化分区、启用Swap交换分区、挂载分区</h4><blockquote><p>格式化分区我们用下面的命令来完成</p></blockquote><pre><code>mkfs.fat -F32 /dev/sda1mkswap /dev/sda2mkfs.ext4 /dev/sda3</code></pre><p>其中：</p><ol><li>-F32 表明我们建立的是 fat32 而非 fat16 或其它不是我们想要的 fat，UEFI规范要求对FAT12，FAT16和FAT32文件系统的支持，但是任何符合条件的供应商都可以选择添加对其他文件系统的支持。 例如，Apple macOS 中的固件支持 HFS+ 文件系统。</li><li>在第二句中，我们为 /dev/sda2 创建了专用于 swap 的存储系统；这是一个特殊的分区类型，它很难被当作 filesystem，所以建立它的指令是 mkswap 而非 mkfs.* 。<br><img src="https://i.loli.net/2020/04/02/PBHad5i8gVjUfz2.jpg" alt=""></li></ol><blockquote><p>启用swap交换分区</p></blockquote><pre><code>swapon /dev/sda2</code></pre><p>然后使用<strong>swapon -show</strong>来检查交换分区有没有被启用<br><img src="https://i.loli.net/2020/04/02/STDoOafC9vPAHZR.jpg" alt=""><br>如果跟我一样那就是启动成功。</p><blockquote><p>挂载分区，我们使用以下3条命令</p></blockquote><ol><li>根目录<br>然后挂载整个新系统的根，这里我们将它挂载到 Arch ISO 环境的 /mnt 下。不要担心，Linux 有一个实用工具 chroot，可以将目录结构的任意点作为新的根。</li></ol><pre><code>mount /dev/sda3 /mnt</code></pre><ol start="2"><li>EFI分区<br>首先我们要先创建EFI挂载文件目录</li></ol><pre><code>mkdir /mnt/boot</code></pre><p>然后挂载</p><pre><code>mount /dev/sda1 /mnt/boot</code></pre><p>到此关于分区这一块我们就已经全部完成了。</p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><h4 id="3-1-首先配置镜像源"><a href="#3-1-首先配置镜像源" class="headerlink" title="3.1 首先配置镜像源"></a>3.1 首先配置镜像源</h4><p>用vim编辑镜像源文件</p><pre><code>vim /etc/pacman.d/mirrorlist</code></pre><p>打开后我们输入/China,回车，移动到最前端，然后输入<strong>V</strong>（一定要大写）<br><img src="https://i.loli.net/2020/04/02/A4GgIUZkl6RSXVQ.jpg" alt=""><br>按俩下下箭头，选中这俩行，按d剪切，然后输入6G，按p复制<br>然后输入n检索下一个多选几个备用源，第一个是清华大学的。<br>默认里面是没有阿里云的源的，我们可以手动输入进去。按I进入编辑模式。<br>这是我配置的：<br><img src="https://i.loli.net/2020/04/02/fNDZXvswyn2T8bk.jpg" alt=""><br>然后<strong>ESC</strong>，输入<strong>shift和:</strong>，最后输入<strong>wq</strong>保存退出。<br>至此我们镜像源就配置好了。</p><h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><p>下面我们就可以安装系统和一些常规的硬件的固件以及软件包了，使用pacstrap脚本。</p><pre><code>pacstrap /mnt base linux linux-firmware</code></pre><p><img src="https://i.loli.net/2020/04/02/L5FjMIYhrcSWA9m.jpg" alt="1585710737927.jpg"><br>然后静待安装即可，如果一直报错，那就说明我们镜像源没有配置好，回到上一步重新配置即可。<br><img src="https://i.loli.net/2020/04/02/WlOMJHPKVoyQzA3.jpg" alt=""><br>OK，装完，我们还要装一些必备的常用软件，我认为NetworkManager这个必须要装，NetworkManager 是检测网络、自动连接网络的程序。无论是无线还是有线连接，它都可以令您轻松管理。</p><pre><code>pacstrap /mnt networkmanager</code></pre><p><img src="https://i.loli.net/2020/04/02/NY5BqJvxHU4dr7P.jpg" alt=""><br>安装完会提示当前实在chroot下运行，忽略请求，这个等下我们在进入root环境下重新设置即可。</p><h4 id="3-3-生成-fstab-文件"><a href="#3-3-生成-fstab-文件" class="headerlink" title="3.3 生成 fstab 文件"></a>3.3 生成 fstab 文件</h4><p>fstab 文件可用于定义磁盘分区，包括各种块设备或者远程文件系统应该如何装入到文件系统。-U 选项指的是 使用UUID作为源标识符。</p><pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></pre><p>然后我们在打开查看一下如果出错可以使用vim更改</p><pre><code>cat /mnt/etc/fstab</code></pre><p><img src="https://i.loli.net/2020/04/02/iYaGq1nt8Nb9z6p.jpg" alt=""></p><h3 id="4-root下的设置"><a href="#4-root下的设置" class="headerlink" title="4.root下的设置"></a>4.root下的设置</h3><blockquote><p>arch-chroot bash 脚本是软件包 arch-install-scripts 的一部分，在运行 /usr/bin/chroot 前，这个脚本会挂载 /proc api 文件系统，建立可用的 /etc/resolv.conf 。<br>chroot 工具能指定目录结构任意的位置为新的根；由于我们需要进行的配置应该在新系统上完成，所以我们应该 chroot 到新系统的根，也就是 /mnt。不过这里我们不是直接就使用 chroot ，而是通过镜像里提供的 arch-chroot 来完成额外的配置。<br>使用下面的命令完成更改</p></blockquote><pre><code>arch-chroot /mnt</code></pre><p>如果显示如图所示，那就说明我们切换成功。<br><img src="https://i.loli.net/2020/04/02/VIOUJcxKgQk47dh.jpg" alt=""></p><h4 id="4-1-设置时区"><a href="#4-1-设置时区" class="headerlink" title="4.1 设置时区"></a>4.1 设置时区</h4><pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre><p>使用以下命令将硬件时钟设置为当前系统时间：</p><pre><code>hwclock --systohc</code></pre><h4 id="4-2-本地化"><a href="#4-2-本地化" class="headerlink" title="4.2 本地化"></a>4.2 本地化</h4><p>/etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，去掉对应行前面的注释符号（＃）就可以啦，还是用 vim 来编辑，建议选择 en_US.UTF-8 UTF-8 的项：</p><pre><code>vim /etc/locale.gen</code></pre><p>这里你会看到报错vim : command not found 这是因为我们root环境下还没安装vim,使用下面命令进行安装：</p><pre><code>pacman -S vim</code></pre><p>然后再次打开/etc/locale.gen，输入/en_US回车然后按n 向下筛选：<br><img src="https://i.loli.net/2020/04/02/3QU46BmrdAKMyzt.jpg" alt=""><br>找到 en_US.UTF-8 UTF-8这行，输入i进入编辑模式去掉前面的#，然后按ESC退出编辑模式，输入shift+: wq保存。<br>如果想要中文：这俩行前的# 也要去掉然后保存。<br><img src="https://i.loli.net/2020/04/02/BnlciY6XemJqfFs.jpg" alt=""><br>接着执行locale-gen生成locale信息。</p><pre><code>locale-gen</code></pre><p><img src="https://i.loli.net/2020/04/02/uQDErwKofi5xGMh.jpg" alt=""><br>然后创建locale.conf文件，并相应的设置LANG变量：</p><pre><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code></pre><p><img src="https://i.loli.net/2020/04/02/o2s6NirUQ1nTmaH.jpg" alt=""><br>这里如果直接选择中文会出现乱码的情况，系统文件中不包含中文字体</p><h4 id="4-3-网络配置"><a href="#4-3-网络配置" class="headerlink" title="4.3 网络配置"></a>4.3 网络配置</h4><h5 id="1-创建hostname文件"><a href="#1-创建hostname文件" class="headerlink" title="1. 创建hostname文件"></a>1. 创建hostname文件</h5><pre><code>echo ryanArch &gt; /etc/hostname</code></pre><p>注意：<strong>ryanArch</strong>，是你想要设置的主机名，名字可以任意取但是尽量不要包含特殊字符，会报错。<br>设置完成之后我们可以cat检查一下，因为后面设置hosts文件的时候我们还要用到。<br><img src="https://i.loli.net/2020/04/02/WGyw3JeDtPMcV7d.jpg" alt=""></p><h5 id="2-编辑hosts文件"><a href="#2-编辑hosts文件" class="headerlink" title="2. 编辑hosts文件"></a>2. 编辑hosts文件</h5><pre><code>vim /etc/hosts</code></pre><p>输入i进入到编辑模式，然后输入内容</p><pre class=" language-Linux"><code class="language-Linux">127.0.0.1 localhost::1       localhost127.0.1.1 你的主机名.localdomain 你的主机名</code></pre><p><img src="https://i.loli.net/2020/04/02/W2HnGKRJXpZO3Lq.jpg" alt=""><br>注意：<strong>ryanArch</strong>，是你刚才所设置的主机名，需要替换。<br>然后输入ESC，shfit+:，wq保存。<br>还记得我们之前装的NetworkManager吗？这里我们把它设置开机启动</p><pre><code>systemctl enable NetworkManager</code></pre><p><img src="https://i.loli.net/2020/04/02/TDaIyUHGSm6LN8X.jpg" alt=""></p><h4 id="4-4-设置root密码"><a href="#4-4-设置root密码" class="headerlink" title="4.4 设置root密码"></a>4.4 设置root密码</h4><p>执行</p><pre><code>passwd</code></pre><p>密码输入不可见，输入就行了，输入完点回车再输入一遍，再回车就行了<br><img src="https://i.loli.net/2020/04/02/XiRYaSGe89Ovmpd.jpg" alt=""></p><h3 id="5-安装引导程序"><a href="#5-安装引导程序" class="headerlink" title="5. 安装引导程序"></a>5. 安装引导程序</h3><blockquote><p><font color=red>!!!这一步可是重中之重，如果设置错误等下重启就会进入不了系统，前面做的那些功夫都是白费，需要重头来一遍。</font><br>systemd-boot (以前被称为gummiboot) 是可以执行 EFI 镜像文件的简单 UEFI 启动管理器。启动的内容可以通过一个配置(glob)或者屏幕菜单选择。Arch 默认安装的 systemd 提供了这个功能。配置很简单，但是只能启动 EFI 可执行程。</p></blockquote><h4 id="5-1-安装EFI-启动管理器"><a href="#5-1-安装EFI-启动管理器" class="headerlink" title="5.1 安装EFI 启动管理器"></a>5.1 安装EFI 启动管理器</h4><pre><code>bootctl --path=/boot install</code></pre><p><img src="https://i.loli.net/2020/04/02/lXyHm83EbtOSi6N.jpg" alt=""><br>–path= 后面接的就是我们一开始创建的 esp (EFI system partition) 的挂载路径</p><h4 id="5-2-基本配置"><a href="#5-2-基本配置" class="headerlink" title="5.2 基本配置"></a>5.2 基本配置</h4><p><strong>大家在设置的时候一定要非常细心，错一个字母，就全错了</strong></p><blockquote><p>基本设置保存在 /boot/loader/loader.conf ,有三个选项：</p></blockquote><ul><li>default – 默认加载的配置文件 (不含 .conf 后缀)。</li><li>timeout – 启动选单的超时时间,如果不设置的话,启动选单只有在按键时才显示。</li><li>editor - 是否允许用户编辑内核参数. yes 是允许, no 是阻止。<br>用 vim 编辑 /boot/loader/loader.conf ：</li></ul><pre><code>vim /boot/loader/loader.conf</code></pre><p>大家可以按照我的来编辑，以防出错<br><img src="https://i.loli.net/2020/04/02/Jc2bGTPWDzjwdFO.jpg" alt=""></p><p><strong>然后我们需要添加一个启动项</strong><br>前面我们不是已经在 /boot/loader/loader.conf 中的选项指定了一个 default 选项嘛，所以我们现在就来配置一下这个默认启动选项。<br>我们要编辑的配置文件是 /boot/loader/entries/arch.conf 同样也是用 vim 来编辑：</p><pre><code>vim /boot/loader/entries/arch.conf</code></pre><p>大家可以按照我的来编辑，以防出错</p><pre class=" language-Linux"><code class="language-Linux">title Arch Linuxlinux /vmlinuz-linuxinitrl /initramfs-linux.imgoptions root=PARTUUID=</code></pre><p><img src="https://i.loli.net/2020/04/02/iDfYw8I4p5rGZxl.jpg" alt=""></p><p>退出编辑后我们需要执行一下这条命令</p><pre><code>blkid -s PARTUUID -o value /dev/sda3 &gt;&gt; /boot/loader/entries/arch.conf</code></pre><p><img src="https://i.loli.net/2020/04/02/ZmEa7eCPxKtXDTU.jpg" alt=""><br>上面的命令将会把根分区的UUID的值追加到 /boot/loader/entries/arch.conf 的最后一行。则文件 /boot/loader/entries/arch.conf 的内容现在为（注意 ：PARTUUID的值都是因人而异的）：我们打开该文件添加一些：</p><pre><code>vim /boot/loader/entries/arch.conf</code></pre><p><img src="https://i.loli.net/2020/04/02/ak7uvq3iMhJYzCV.jpg" alt=""></p><blockquote><p><font color=red>!!!注意：</font>我们需要把UUID调到上一行，因为刚才是命令追加的会多出一个换行符，不更改的话开机就会报错。<br><img src="https://i.loli.net/2020/04/02/EFpJGSbfNhAuWPo.jpg" alt=""><br>更改之后我们要在后面加上空格rw。<br>至此，恭喜你，关于arch-Linux基本安装已经全部完成了。</p></blockquote><h3 id="6-重启"><a href="#6-重启" class="headerlink" title="6.重启"></a>6.重启</h3><p>首先输入<strong>exit</strong>退出到Arch ISO环境下,然后输入命令重启虚拟机。</p><pre><code>systemctl reboot</code></pre><p>开机我们可以看到我们新建的启动项<br><img src="https://i.loli.net/2020/04/02/pQsiWHDJm2UEh6q.jpg" alt=""><br>然后回车，当出现这个界面的时候，再次恭喜你，基础安装成功！<br>然后输入我们root账号和你设置的root密码，密码不可见输入完成后回车即可。<br><img src="https://i.loli.net/2020/04/02/uwsYVnLixfdSDbH.jpg" alt=""></p><h2 id="3-配置arch-Linux"><a href="#3-配置arch-Linux" class="headerlink" title="3.配置arch-Linux"></a>3.配置arch-Linux</h2><h3 id="3-1-创建普通用户"><a href="#3-1-创建普通用户" class="headerlink" title="3.1 创建普通用户"></a>3.1 创建普通用户</h3><blockquote><p>正经的 Linux 用户不会用 root 干所有的事情，如果这么做的话将会很危险。创建一个普通的用户，并让它可以通过 sudo 指令用 root 权限执行命令是一般的解决方案。</p></blockquote><ol><li>在使用sudo 之前，我们需要安装sudo这个软件包</li></ol><pre><code>pacman -S sudo</code></pre><ol start="2"><li>然后我们需要配置sudoers<br>执行 visudo 来修改 /etc/sudoers 文件。使用它的好处是，它会在保存时作语法检查，以避免错误的更改使 sudo 彻底不可用。</li></ol><pre><code>EDITOR=vim visudo</code></pre><blockquote><p>此处通过环境变量 EDITOR 来声明使用 vim 来编辑文件，默认的情况下 visudo 是用 vi 来编辑的。（vi 和 vim 的用法略有不同）</p></blockquote><p>输入shift+: ,再输入set nu,显示行号<br><img src="https://i.loli.net/2020/04/02/s74puhDvX9Yo3IH.jpg" alt=""><br>我们找到82行<br><img src="https://i.loli.net/2020/04/02/A7m82CLqPltUkTe.jpg" alt=""><br>把%wheel前面的#去掉<br>然后ESC退出，wq保存</p><blockquote><p>去掉注释的作用：取消注释以允许 wheel 组成员执行任何命令。</p></blockquote><ol start="3"><li>添加一个wheel组普通用户</li></ol><pre><code>user -m -G wheel 用户名</code></pre><blockquote><p><strong>用户名规范</strong>：用户名必须是合法的。最简单的就是 不带空格的字母 和 数字 的组合。<br><strong>参数介绍</strong>： -m 参数表示同时创建该用户的家目录，这会被默认置为 /home/用户名。 -G wheel 表示同时将该用户加入 wheel 用户组。<br> 然后设置该用户的密码</p></blockquote><pre><code>passwd 用户名 </code></pre><p><img src="https://i.loli.net/2020/04/02/7QkXmHhwsJ39o2S.jpg" alt=""><br>到这里普通用户就创建完成了。<br>输入exit，退出到用户登录<br>然后输入我们刚创建的普通用户名和密码<br><img src="https://i.loli.net/2020/04/02/Ewf5KOMba7CYsL1.jpg" alt=""></p><p>变成了 $ ，这就意味着这是普通用户。</p><h3 id="3-2-VMware的相关服务"><a href="#3-2-VMware的相关服务" class="headerlink" title="3.2 VMware的相关服务"></a>3.2 VMware的相关服务</h3><p>因为我们使用的是虚拟机创建的，所以需要配置一下相应的配置，比如VMware Tools</p><ol><li>安装VMware Tools</li></ol><pre><code>sudo pacman -S open-vm-tools</code></pre><p>因为是普通用户所以安装的时候我们需要输入密码，密码不可见输入完回车即可。</p><ol start="2"><li>设置vmtoolsd、vmblock-fuse、gtkmm3服务开机启动</li></ol><blockquote><ul><li>vmtoolsd : 负责汇报虚拟机状态的服务</li><li>vmware-vmblock-fuse : 文件系统实用程序。 通过FUSE（用户空间中的文件系统）实现宿主 / 虚拟机之间拖拽文件。</li><li>gtkmm3 : 如要启用客户机的拖拽与复制粘贴功能，则需要安装 gtkmm3</li></ul></blockquote><pre><code>systemctl enable vmtoolsd vmware-vmblock-fuse</code></pre><p><img src="https://i.loli.net/2020/04/02/8Llg1YnFGuAJ2h3.jpg" alt=""><br>设置过程都是需要我们提供密码的<br>gtkmm3需要安装</p><pre><code> sudo pacman -S gtkmm3</code></pre><ol start="3"><li>相关驱动</li></ol><ul><li>xf86-input-vmmouse : VMWare鼠标输入驱动程序</li><li>xf86-video-vmware : vmware显示驱动程序，如果想要让虚拟机显示器填满屏幕，就必须要安装这个软件包</li><li>mesa : OpenGL规范的开源实现</li></ul><pre><code>sudo pacman -S xf86-input-vmmouse xf86-video-vmware mesa</code></pre><p><img src="https://i.loli.net/2020/04/02/FYmidkKWS3DbexM.jpg" alt=""><br>输入Y确认安装即可</p><h2 id="4-配置图形界面"><a href="#4-配置图形界面" class="headerlink" title="4.配置图形界面"></a>4.配置图形界面</h2><p>大家肯定都不太喜欢这个命令行模式把，黑乎乎的很丑，那么我们接下来就要开始配置图形界面了。</p><h4 id="4-1-安装桌面环境"><a href="#4-1-安装桌面环境" class="headerlink" title="4.1 安装桌面环境"></a>4.1 安装桌面环境</h4><p><strong>显示服务</strong><br>X 窗口管理系统 ( X11 或者 X ) 是基于网络的显示协议，提供了窗口功能，包含建立图形用户界面(GUI)的标准工具和协议。 Xorg 是 X 窗口的开源实现，提供图形用户界面。</p><ol><li><strong>安装 xorg ：</strong></li></ol><pre><code>sudo pacman -S xorg</code></pre><p>尽管 Xorg 提供了用于构建图形环境的基本框架，但是为了获得完整的用户体验，可能还需要其他组件。 GNOME，KDE，LXDE 和 Xfce 等桌面环境将各种 X 客户端捆绑在一起，例如窗口管理器，面板，文件管理器，终端仿真器，文本编辑器，图标和其他实用程序。<br>这里介绍俩种:</p><ul><li>1.Gnome </li><li>2.KDE<br>依据喜好来进行安装，我个人喜欢gnome所以演示就用gnome来演示</li></ul><pre><code>sudo pacman -S gnome</code></pre><p>过程可能有点长，大家需要耐心等待。。。。</p><ol start="3"><li><strong>安装显示管理器：</strong><br>大多数桌面环境都包括一个显示管理器，用于自动启动图形环境和管理用户登录。<br>这里使用gdm</li></ol><pre><code>sudo pacman -S gdm</code></pre><p>然后设置开机启动</p><pre><code>systemctl enable gdm</code></pre><p><img src="https://i.loli.net/2020/04/02/QkOofBYwSxNuZ9d.jpg" alt=""></p><blockquote><ul><li>关于KDE</li></ul><ol><li>plasma-meta : 用以安装 KDE Plasma 的元软件包<br>sudo pacman -S plasma-meta<ol start="2"><li>sddm : 基于QML的X11和Wayland显示管理器<br>sudo pacman -S sddm</li><li>sddm 服务设为开机自启：<br>systemctl enable sddm<br>  systemctl reboot</li></ol></li></ol></blockquote><pre><code>systemctl reboot</code></pre><p>重启即可<br>Gnome<br><img src="https://i.loli.net/2020/04/02/dTJDvgnE6j7xqCN.jpg" alt=""><br>KDE<br><img src="https://i.loli.net/2020/04/02/LvmU4czJakOnYis.jpg" alt=""></p><h4 id="4-2-配置终端模拟器"><a href="#4-2-配置终端模拟器" class="headerlink" title="4.2 配置终端模拟器"></a>4.2 配置终端模拟器</h4><p>我们进入gnome桌面环境发现是不是少了一些东西，我们怎么输入命令呢，这就需要我们安装终端模拟器了</p><blockquote><p>终端模拟器有很多，这里就举几个经典的例子：</p></blockquote><ul><li>GNU/Linux：gnome-terminal、Konsole；</li><li>macOS：Terminal.app、iTerm2；</li><li>Windows：Win32 控制台、ConEmu 等等<br>这里我要安装的终端模拟器是 Tilix</li></ul><pre><code>sudo pacman -S tilix</code></pre><p>不喜欢的可以安装deepin-terminal （属于Deepin的默认终端仿真应用程序，源码仓库地址：<a href="https://github.com/linuxdeepin/deepin-terminal" target="_blank" rel="noopener">https://github.com/linuxdeepin/deepin-terminal</a><br>我选择这个的原因是因为它开源，而且无需任何配置就已经很美观了，还有一点就是不会有 konsole 在系统显示缩放比例为 小数倍 时随机出现横线或竖线的 bug。）在安装终端模拟器之前，我们需要按下 Ctrl + Alt + F3 切换至 tty3(KDE下是F2，tty2) ，登录，然后输入命令：</p><pre><code>sudo pacman -S deepin-terminal</code></pre><p>为了预防出错，建议大家要使用小键盘数字键<br>安装完成后输入 Ctrl + Alt + F1 进入图形化界面</p><h4 id="4-3-配置中文环境"><a href="#4-3-配置中文环境" class="headerlink" title="4.3 配置中文环境"></a>4.3 配置中文环境</h4><p>前面我已经开启了中文配置<br>如果前面只选择了英文需要到/etc/locale.gen中取消掉zh_CN.UTF-8前面的注释<br>然后打开tilix输入</p><pre><code>sudo locale-gen</code></pre><p><img src="https://i.loli.net/2020/04/02/2idEceIruPGmWjM.jpg" alt=""></p><pre><code> vim ~.xprofile</code></pre><p>vim我们发现没法复制粘贴，那就需要用到文本编辑器了<br>这里推荐一个好用的文本编辑器<br><strong>leafpd</strong></p><pre><code>sudo pacman -S leafpadsudo leafpad ~.xprofile</code></pre><p>写入<br>export LANG=zh_CN.UTF-8<br>export LANG=zh_CN:en_US<br>export LC_CTYPE=en_US.UTF-8<br>然后写入配置文件</p><pre><code>sudo leafpad /etc/locale.conf</code></pre><p>加入：LANG=zh_CN.UTF-8</p><p>然后我们需要下载一下中文字体：<br>有很多可以供我们选择：</p><ul><li>Google Noto Fonts 系列：noto-fonts-sc 和 noto-fonts-emoji</li></ul><pre><code>sudo pacman -S base-devel gitgit clone https://aur.archlinux.org/noto-fonts-sc.gitcd noto-fonts-scmakepkg -sisudo pacman -S noto-fonts-emoji</code></pre><ul><li>文泉</li></ul><pre><code>sudo pacman -S wqy-zenhei</code></pre><p>我们重启一下。。。<br>我们可以看到已经变为中文了<br><img src="https://i.loli.net/2020/04/02/OKJmF2Rah1DjqZL.jpg" alt=""><br>推荐大家保留旧的名称以便以后写路径的时候方便</p><h4 id="4-4-安装中文输入法-搜狗输入法"><a href="#4-4-安装中文输入法-搜狗输入法" class="headerlink" title="4.4 安装中文输入法(搜狗输入法)"></a>4.4 安装中文输入法(搜狗输入法)</h4><pre><code>sudo pacman -S fcitx-imsudo pacman -S fcitx-sogoupinyinsudo pacman -S fcitx-configtool</code></pre><p><img src="https://i.loli.net/2020/04/02/6ifxWqJjHoBQC87.jpg" alt=""><br>当我们输入第二条命令的时候会报错<br>这时候我们需要修改一下配置文件</p><pre><code>sudo leafpad /etc/pacman.conf</code></pre><p><img src="https://i.loli.net/2020/04/02/ovFHSRQE2fuLKmB.jpg" alt=""><br>在末尾添加</p><ul><li>[archlinuxcn]<br>Server = <a href="https://mirrors.ustc.edu.cn/archlinuxcn/$arch" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/archlinuxcn/$arch</a></li></ul><p>打开32位仓库，去掉前面的注释</p><ul><li>[multilib]<br>Include = /etc/pacman.d/mirrorlist<br>保存，然后刷新</li></ul><pre><code>sudo pacman -Syy</code></pre><p>安装密钥包</p><pre><code>sudo pacman -S archlinuxcn-keyring</code></pre><p>然后再运行第二条命令<br>在运行过程中我们发现一个问题<br><img src="https://i.loli.net/2020/04/02/dHgs5J8m97UvZzb.jpg" alt=""><br>现在我的时间是14：17 而arch Linux上显示的是06：17 时间不对称导致了这个问题<br>解决方法：</p><ul><li>打开设置，选择日期和时间<br><img src="https://i.loli.net/2020/04/02/5JSYhU7Ibna2gkH.jpg" alt=""></li><li>打开自动设置日期和时间，时区调整为上海<br><img src="https://i.loli.net/2020/04/02/XzP9SKWk3tFTgGe.jpg" alt=""><br>重启后，再运行第二条命令<br>编辑xprofile文件</li></ul><pre><code>sudo leafpad ~/.xprofile</code></pre><p>写入：<br>export XIM=fcitx<br>export XIM_PROGRAM=fcitx<br>export GTK_IM_MODULE=fcitx<br>export QT_IM_MODULE=fcitx<br>export XMODIFIERS=@im=fcitx”<br><img src="https://i.loli.net/2020/04/02/ym8IlqZXrgLQ34W.jpg" alt=""><br>然后我们还需要再次重启一下<br>之后打开fcitx-configtool选择搜狗输入法即可</p><p>结尾：关于VMware安装ArchLinux的方法就介绍到这里了，整篇我都是手打，边演示边写教程，跟着我的步骤一步一步来肯定是能成功的。关于在物理机上安装，后续教程会讲。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub部署个人博客</title>
      <link href="/2020/04/02/hexo-github-bu-shu-ge-ren-bo-ke/"/>
      <url>/2020/04/02/hexo-github-bu-shu-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github博客搭建"><a href="#Hexo-Github博客搭建" class="headerlink" title="Hexo+Github博客搭建"></a>Hexo+Github博客搭建</h1><p>[toc]</p><h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1. 安装node.js"></a>1. 安装node.js</h2><p>去官网下载64位安装包 -&gt; <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">传送门</a><br>一路next<br>安装好之后进入命令提示符输入node -v、npm -v 如果出现版本号那么我们就安装成功了。<br><img src="https://i.loli.net/2020/04/02/H4st7I9WbPdyDNT.jpg" alt="1585724500972.jpg"><br>如果没有出现版本号，可能是没有配置环境变量的原因<br>计算机 —&gt; 属性 —&gt; 环境变量<br><img src="https://i.loli.net/2020/04/02/nQ1yMdZV7lo4Gpf.jpg" alt="1585724348653.jpg"><br>选择Path，然后点击编辑<br><img src="https://i.loli.net/2020/04/02/H2nSCjZr8QzFbaG.jpg" alt="1585724411792.jpg"><br><img src="https://i.loli.net/2020/04/02/57RWhJPQKyTjXi9.jpg" alt="1585724475553(1).jpg"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><p>去官网下载即可 -&gt; <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">传送门</a><br>!<img src="https://i.loli.net/2020/04/02/wpyO1TXnVvgh3FZ.jpg" alt="1585724868501.jpg"><br>安装后输入git –version 出现版本号即为安装成功，关于环境变量配置方法跟node.js一样</p><h2 id="3-准备一个GitHub账号"><a href="#3-准备一个GitHub账号" class="headerlink" title="3.准备一个GitHub账号"></a>3.准备一个GitHub账号</h2><p><a href="https://www.github.com" target="_blank" rel="noopener">传送门</a><br><img src="https://i.loli.net/2020/04/02/6zIaKnoNypOJZlq.jpg" alt="1585725045329.jpg"><br>新建一个项目：<br><img src="https://i.loli.net/2020/04/02/68axYnCvAT4hs2X.jpg" alt="1585725142759.jpg"><br>然后如下图所示，输入自己的项目名字，README初始化也要勾上。<br><img src="https://i.loli.net/2020/04/02/YK3cunsR54hP1ty.jpg" alt="1585725302756.jpg"></p><p>打开设置：<br><img src="https://i.loli.net/2020/04/02/cX1qJmMEoiQ9yIv.jpg" alt="1585725426980.jpg"><br>我们可以选一个主题样式<br>点击上方链接我们就进入到了我们的页面中<br><img src="https://i.loli.net/2020/04/02/Ob6eKvSD1QTUnZN.jpg" alt="1585725539494.jpg"></p><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><p>自己找一个空余磁盘，我用的是我电脑里的E盘，新建一个www网站根目录文件夹<br><img src="https://i.loli.net/2020/04/02/SQVfaMtC5OP4qZp.jpg" alt="1585725693532.jpg"><br>然后在www文件夹中建立我们的网页存放文件夹<br><img src="https://i.loli.net/2020/04/02/U3uKlFv8IG6rNfw.jpg" alt="1585725764694.jpg"><br>进入到该文件夹内，点击右键Git Bash Here<br>输入：</p><pre><code>npm i hexo-cli -g</code></pre><p><img src="https://i.loli.net/2020/04/02/j9nzPo8dbylVJHr.jpg" alt="1585726008594.jpg"><br>安装完后输入hexo -v验证是否安装成功。<br>如果安装错误：<br>目前国内npm源有问题；所以键入如下代码即可安装成功:</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm install hexo-cli -g</code></pre><p>需要重新打开才可安装<br><img src="https://i.loli.net/2020/04/02/OoFgIk5cbrNY3Ef.jpg" alt="1585726927514.jpg"><br>出现下面信息说明我们安装成功<br>然后就要初始化我们的网站，输入hexo init初始化文件夹<br><img src="https://i.loli.net/2020/04/02/BgJXblw8ZM2YHQ3.jpg" alt="1585727004746.jpg"><br>这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦，效果如下：" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦，效果如下：</a><br><img src="https://i.loli.net/2020/04/02/KQSVAYRhJa9rc6C.jpg" alt="1585727133042.jpg"><br>按ctrl+c关闭本地服务器。</p><h2 id="5-链接GitHub"><a href="#5-链接GitHub" class="headerlink" title="5. 链接GitHub"></a>5. 链接GitHub</h2><p>设置你github的名字和邮箱</p><pre><code>git config --global user.name &quot;EzioEcho&quot;git config --global user.email &quot;wpx1007047653@gmail.com&quot;</code></pre><p><img src="https://i.loli.net/2020/04/02/3vcnlbtP4fSmGCB.jpg" alt="1585727271573.jpg"><br>然后生成密钥SSH key：<br>在你头向下点击settings<br><img src="https://i.loli.net/2020/04/02/7n6sxEy84NJAfGd.jpg" alt="1585727446292.jpg"><br>找到SSH and GPG keys<br><img src="https://i.loli.net/2020/04/02/5Sm1n4qYxdcLMpC.jpg" alt="1585727469325.jpg"><br>新建一个SSH，名字随便起<br>然后回到GitBash<br>输入</p><pre><code>ssh-keygen -t rsa -C &quot;wpx1007047653@gmail.com&quot;</code></pre><p><img src="https://i.loli.net/2020/04/02/qx76BpyvdXHDTz3.jpg" alt="1585727693954.jpg"><br>我们可以看到公钥保存到这个路径下了<br>然后我们输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>就会出现我们的密钥，然后复制到GitHub中</p><p><img src="https://i.loli.net/2020/04/02/YgKftxSm1pijVMo.jpg" alt="1585727817898.jpg"><br>然后点击add SSH key</p><p><img src="https://i.loli.net/2020/04/02/lWvbdVuXwEiOhm3.jpg" alt="1585727825623.jpg"></p><p>然后就可以看到我们创建的密钥了</p><p><img src="https://i.loli.net/2020/04/02/UtHuMp5RTdywveS.jpg" alt="1585727877810.jpg"></p><p>回到gitbash<br>输入</p><pre><code>ssh -T git@github.com</code></pre><p>如果如下图所示，出现你的用户名，那就成功了。<br><img src="https://i.loli.net/2020/04/02/gcVPA7X2d9kSwYZ.jpg" alt="1585728115352.jpg"><br>刚创建可能会连不上，多试几次就好了<br><img src="https://i.loli.net/2020/04/02/yRoG38pkLeXYTKr.jpg" alt="1585728153459.jpg"><br>然后下面我们要改一下博客的配置找到博客根目录下的_config.yml文件，这个是博客的配置文件，在这里你可以修改与博客相关的各种信息。<br><img src="https://i.loli.net/2020/04/02/aWHleAEUB5znM6D.jpg" alt="1585728263993.jpg"><br>拉到最后，修改为：</p><pre><code>deploy:  type: git  repository: https://github.com/EzioEcho/ryanBlog.github.io.git  branch: master</code></pre><blockquote><p>然后需要安装一下<strong>npm i hexo-deployer-git</strong>扩展，开始上传三连</p></blockquote><ul><li>hexo clean </li><li>hexo g</li><li>hexo d<br>然后就可以去你的页面<br><img src="https://i.loli.net/2020/04/02/ABME4bJ7rzuvyxd.jpg" alt="1585731067735.jpg"><br>但是发现好像CSS走丢了<br>解决办法：</li><li>没绑定域名</li></ul><ol><li>修改hexo中 _config.yml 文件：<br>将url:/  修改为 url:  <a href="http://xxx.guithub.io" target="_blank" rel="noopener">http://xxx.guithub.io</a> 。即 在后面加上Github 主页的仓库名 然后修改root文件目录为 root: /你的项目名<br><img src="https://i.loli.net/2020/04/02/J7MbjETwSCe6Bav.jpg" alt="1585731982311.jpg"><br>再次打开<br><img src="https://i.loli.net/2020/04/02/cxNqKa9ByhF6vi2.jpg" alt="1585731996323.jpg"><br>发现样式已经好了</li></ol><ul><li>绑定域名是不会出现这个问题的，但是也要修改一下URL<br>关于绑定域名：<br>首先我们先ping一下 ：ping xxx.github.io<br>xxx指的是你的GitHub用户名<br><img src="https://i.loli.net/2020/04/02/bxIBATijDQUhSOH.jpg" alt="1585803439870.jpg"><br>然后再解析域名，添加一条A记录，指向这个ping到的IP<br>这时候你的仓库项目文件夹就会多出一个CNAME文件<br>然后打开项目设置：<br><img src="https://i.loli.net/2020/04/02/X3IxO78SpVbjkA9.jpg" alt="1585803590087.jpg"><br>在Custom domain添加你的域名<br>然后在你hexo文件的根目录中的_config.yml修改URL，root项就选到根目录就行<br><img src="https://i.loli.net/2020/04/02/D3IvOGSkFcUY45i.jpg" alt="1585803699279.jpg"></li></ul><blockquote><p>关于hexo的一些命令<br>hexo new “postName”        //新建文章<br>hexo new page “pageName”        //新建页面<br>hexo g          //生成静态页面至public目录<br>hexo server         //开启预览访问端口（默认端口4000，’ctrl + c’关闭server）简写为 hexo s<br>hexo deploy         //将.deploy目录部署到GitHub 简写 hexo d</p></blockquote><blockquote><p>备份博客源文件<br>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。<br>首先在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下。<br>然后git branch -b hexo切换到hexo分支，然后git add .，然后git commit -m “xxx”，最后git push origin hexo提交就行了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站建设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/01/hello-world/"/>
      <url>/2020/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
